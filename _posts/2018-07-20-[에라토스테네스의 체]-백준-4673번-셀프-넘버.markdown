---
layout: post
title:  "[에라토스테네스의 체] 백준 4673번 셀프 넘버"
date:   2018-07-20 21:00:59
author: Jm Park
categories: Algorithm
---

# 문제
셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.  
양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다.  
예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 이런식으로 다음과 같은 수열을 만들 수 있다.  
33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...  
n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다.  
생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97  
10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.

# 입력
입력은 없다

# 출력
10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.

# 예제 입력/출력
| 예제 입력 | 예제 출력 |  
| :-------------------- | :------------------ |  
|  | 1<br>3<br>5<br> ...<br>9960<br>9971<br>9982<br>9993 |    

 # 코드1
 ```{.cpp}
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <vector>
using namespace std;

vector<int> selfnumber;

// 생성자 집합
int ctor(int num) {	
	int next_num = 0;
	
	if (num < 10)
		next_num = num + num;
	else if (num < 100)
		next_num = num + num / 10 + num % 10;
	else if (num < 1000) {
		next_num = num + num / 100;
		num = num % 100;
		next_num += num / 10 + num % 10;
	}		
	else if (num < 10000) {
		next_num = num + num / 1000;
		num = num % 1000;
		next_num += num / 100;
		num = num % 100;
		next_num += num / 10 + num % 10;
	}
	else
		next_num = 10000 + 1;

	if (next_num > 10000 || selfnumber[next_num] == 0) { // // 10000이 넘는 경우 or 이미 생성자를 가지고 있는 수인 경우 패스
		return 0;
	}

	selfnumber[next_num] = 0;
	ctor(next_num);
}

int main() {
	// 1: 셀프넘버, 0: 셀프넘버가 아닌 수
	selfnumber.assign(10005, 1); // selfnumber배열의 모든값을 1로 초기화
	
	for (int i = 1; i <= 10000; i++) {
		if (selfnumber[i] == 0) // 이미 생성자를 가지고 있는 수인 경우 패스
			continue;
		ctor(i);
	}

	// 정답 출력: 셀프넘버 출력
	for (int i = 1; i <= 10000; i++)
		if (selfnumber[i] == 1)
			printf("%d\n",i);

	return 0;
}
 ```

# 풀이1
가장 처음에 생각나는대로 짠 코드라 굉장히 지저분하다.  
처음에 selfnumber를 vector가 아닌 배열로 만들었었는데, 배열을 전체 1로 초기화 하기 위해 memset()함수를 썼다가 봉변을 당했다.  
https://stackoverflow.com/questions/35839179/why-isnt-memset-assigning-1   
위 링크를 보면 memset()함수는 배열의 데이터 타입이 int형일때 0과 -1 이외에는 제대로 동작하지 않게 되는 것을 알 수 있다.    

# 코드2
```{.cpp}
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <vector>
using namespace std;

vector<int> selfnumber;

// 생성자 집합
int ctor(int num) {	
	int next_num = num;

	if (num == 10000) {
		next_num += num / 10000;
		num %= 10000;
	}
	if (num >= 1000) {
		next_num += num / 1000;
		num %= 1000;
	}
	if (num >= 100) {
		next_num += num / 100;
		num %= 100;
	}
	if (num >= 10)
		next_num += num / 10;
	
	return next_num + num % 10;
}

int main() {
	// 1: 셀프넘버, 0: 셀프넘버가 아닌 수
	selfnumber.assign(20005, 1); // selfnumber배열의 모든값을 1로 초기화
	
	for (int i = 1; i <= 10000; i++) {
		selfnumber[ctor(i)] = 0;
		if (selfnumber[i])
			printf("%d\n", i);
	}

	return 0;
}
```

# 풀이2
생성자 숫자를 알아내는 ctor()함수를 좀 더 간결하게 만들었다.  
'코드1'에서는 재귀함수를 썼는데, 굳이 그렇게하지 않고 1~10000까지 main함수에서 쭉 호출해도 무관하다는 것을 알게되어 바꾸니 한결 생각이 나아졌다.  코드1과 동일한 크기로 selfnumber를 설정해서 에러가 났었는데, for문에서 셀프넘버 여부 체크와 동시에 답안 출력을 했기 때문에 에러가 났었다. selfnumber의 크기를 좀 더 넉넉하게 줘서 저장에는 문제가 없게끔 그리고 답안 출력에도 상관없게 바꿨다.

# 코드3
```{.cpp}
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <vector>
using namespace std;

vector<int> selfnumber;

// 생성자 집합
int ctor(int num) {	
	int next_num = num;

	while (num != 0) {
		next_num += num % 10;
		num /= 10;
	}
	
	return next_num;
}

int main() {
	// 1: 셀프넘버, 0: 셀프넘버가 아닌 수
	selfnumber.assign(20005, 1); // selfnumber배열의 모든값을 1로 초기화
	
	for (int i = 1; i <= 10000; i++) {
		selfnumber[ctor(i)] = 0;
		if (selfnumber[i])
			printf("%d\n", i);
	}

	return 0;
}
```

# 풀이3
최대한으로 줄여봤다. 위 '코드2'에서 ctor()함수가 반복적인 if문으로 구성된 점이 마음에 안들어서 1의 자리 숫자부터 줄여나가는 방식으로 바꿨다. while문의 조건 num!=0을 생각하기 가장 힘들었다.
