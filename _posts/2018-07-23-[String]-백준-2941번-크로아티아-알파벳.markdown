---
layout: post
title:  "[String] 백준 2941번 크로아티아 알파벳"
date:   2018-07-23 13:00:49
author: Jm Park
categories: Algorithm
---

# 문제
예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다. 따라서, 다음과 같이 크로아티아 알파벳을 다음과 같이 변경해서 입력했다.  
| 크로아티아 알파벳 | 변경 |  
| :-------------------- | :------------------ |  
| č | c= |
| ć | c= |
| dž | dz= |
| ñ | d- |
| lj | lj |
| nj | nj |
| š | s= |
| ž | z= |  
예를 들어, ljes=njak은 크로아티아 알파벳 6개(lj, e, š, nj, a, k)로 이루어져 있다. 단어가 주어졌을 때, 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다.  
dž는 무조건 하나의 알파벳으로 쓰이고, d와 ž가 분리된 것으로 보지 않는다. lj와 nj도 마찬가지이다. 위 목록에 없는 알파벳은 한 글자씩 센다.

# 입력
첫째 줄에 최대 100글자의 단어가 주어진다. 알파벳 소문자와 '-', '='로만 이루어져 있다.  
문제 설명에 나와있는 크로아티아 알파벳만 주어진다.

# 출력
입력으로 주어진 단어가 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다.

# 예제 입력/출력

| 예제 입력 | 예제 출력 |  
| :-------------------- | :------------------ |  
| ljes=njak | 6 |
| ddz=z= | 3 |
| nljj | 3 |
| c=c= | 2 |

# 코드
```{.cpp}
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>

using namespace std;

string croatian_alphabets[] = {
	"dz=", "c=", "c-", "d-", "lj", "nj", "s=", "z="
};

int main() {
	string word;
	int word_length, pos;

	getline(cin, word);
	word_length = word.length();
	
	for (int i = 0; i < 8; i++) {
		// 입력받은 word에 크로아티안 알파벳이 속해있는지 확인
		if ((pos = word.find(croatian_alphabets[i])) != string::npos) {
			// word 알파벳 개수 update
			word_length = word_length - croatian_alphabets[i].length() + 1;			
			// 이미 구해진 크로아티아알파벳 문자 공란으로 변경 (중복카운트를 피하기 위함)
			word.replace(pos, croatian_alphabets[i].length(), " ");
		}
	}

	printf("%d\n", word_length);

	return 0;
}
```

# 풀이 
이번 문제의 경우 string에 익숙해지기 위해 일부러 string 클래스를 많이 찾아 봤는데,
> 1. string::find()함수는 찾는 단어나 문자열이 없으면 string::npos를 리턴한다.  
> 2. 평소 속도 문제로 printf/scanf를 즐겨 사용하지만, string을 쓸 경우 cout/cin을 사용해야 한다. [[참고사이트]](https://code.i-harness.com/ko/q/a5cd25)
